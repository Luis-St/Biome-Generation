plugins {
	id "java"
	id "org.openjfx.javafxplugin" version "0.0.10"
}

repositories {
	mavenCentral()
	maven {
		url "https://maven.luis-st.net/libraries"
	}
}

javafx {
	version = "${JavaFx}"
	modules = ["javafx.controls"]
}

dependencies {
	// Local
	implementation "org.controlsfx:ControlsFx:${ControlsFx}" // Fx
	implementation "net.luis:LUtils:${LUtils}" // Utility
	implementation "net.luis:FxUtils:${FxUtils}" // Fx Utility
	// Google
	implementation "com.google.guava:guava:${GoogleGuava}" // Utility
	// Apache
	implementation "org.apache.logging.log4j:log4j-api:${Log4jAPI}" // Logging
	implementation "org.apache.logging.log4j:log4j-core:${Log4jCore}" // Logging
	implementation "org.apache.commons:commons-lang3:${ApacheLang}" // Utility
	implementation "commons-io:commons-io:${ApacheIO}" // IO
	// Other
	implementation "net.sf.jopt-simple:jopt-simple:${JoptSimple}" // Startup
	implementation "org.jetbrains:annotations:${JetBrainsAnnotations}" // Annotations
	implementation "it.unimi.dsi:fastutil:${UnimiFastutil}" // Utility
}

tasks.register("debugRun", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.DebugRun")
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("fxRun", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.FxRun")
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("testRun", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.TestRun")
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.register("imageRun", JavaExec) {
	group = "runs"
	getMainClass().set("net.luis.run.ImageRun")
	classpath = sourceSets.main.runtimeClasspath
	args("10000")
	jvmArgs("--module-path", classpath.asPath, "--add-modules", "javafx.controls")
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

jar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
